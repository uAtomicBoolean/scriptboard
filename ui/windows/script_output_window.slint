import "../assets/fonts/Inter-Italic-VariableFont_opsz,wght.ttf";
import "../assets/fonts/Inter-VariableFont_opsz,wght.ttf";

import { UAppTheme } from "@sleek-ui/app-theme.slint";
import { UButton, UDivider, UText, UCenter } from "@sleek-ui/widgets.slint";

import { ScrollView } from "std-widgets.slint";

import { Script } from "../structs.slint";


export component ScriptOutputWindow inherits Window {
    in-out property <[Script]> scripts;
    in-out property <int> script_index;
    property <Script> script: scripts[script_index];
    callback execute-script();
    title: @tr("Output - ") + script.name;
    icon: @image-url("../../res/linux/32x32.png");
    default-font-family: "Inter";
    default-font-size: 14px * UAppTheme.scale-factor;
    min-width: 700px;
    min-height: 500px;
    background: UAppTheme.bg-container;
    VerticalLayout {
        HorizontalLayout {
            vertical-stretch: 0;
            padding: UAppTheme.padding-base;
            alignment: center;
            height: 40px * UAppTheme.scale-factor;
            VerticalLayout {
                alignment: center;
                UButton {
                    variant: primary;
                    text: @tr("Restart");
                    icon: @image-url("../assets/icons/restart.svg");
                    icon-placement: start;
                    clicked => {
                        execute-script();
                    }
                }
            }
        }

        UDivider {
            vertical-stretch: 0;
        }

        output-view := ScrollView {
            vertical-stretch: 2;
            VerticalLayout {
                alignment: start;
                padding-top: UAppTheme.padding-small;
                padding-bottom: UAppTheme.padding-small;
                output := UText {
                    text: script.output;
                }
            }
        }
    }

    Timer {
        running: script.running;
        interval: 10ms;
        triggered => {
            output-view.viewport-y = - output-view.viewport-height + output-view.visible-height;
        }
    }

	// Used to scroll to the end of the output when opening the window.
    Timer {
        running: true;
        interval: 10ms;
        triggered => {
            output-view.viewport-y = - output-view.viewport-height + output-view.visible-height;
            self.running = false;
        }
    }
}
